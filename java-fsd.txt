Day1    21-Jun-2021
====================
JDK 8
=====
https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html#license-lightbox


STS Download
============
https://dist.springsource.com/release/STS/3.9.11.RELEASE/dist/e4.14/spring-tool-suite-3.9.11.RELEASE-e4.14.0-win32-x86_64.zip

Spring Distrubution 5.0
=======================
https://repo.spring.io/release/org/springframework/spring/5.0.2.RELEASE/


Enterprise Application
=======================


Enterprise :(Business Organization) : make the money by providing services
===================================
Banks  :withdraw,deposit,fundTransfer,loan
LICS   :Insurance policy
Transports:book,cancel ticket
Hotels  :order food,book table
Hospitals:appointment
School   :admission,teaching,result
College  :admission,teaching,result


Layer :Logical separation of code
Tier  :Physical separation of code

Applications development platforms

Java
.Net
PHP
Node JS
Python



Database Operation
=====================
C=Create
R=Retrieve
U=Update
D=Delete


fundTransfer:(int source,int destination ,int amount)
             
             1.retireve source and validate amount < avialable
             2.retirve destination and validate 
             3.debit source -update
             4.credit destination -update
             5.commit


1.Presentation Layer :Code written to provide the input screen and resposne to the user
2.Service Layer      :Logical implementation of business rules
3.Data Access Layer  :Code written to access the data from Data source
4.Data Layer         :It is source for Data   


Three data sources
==================
Collection (List,Set,Map)
MySQL
MongoDB


Data Access Layer : Hibernate
Service Layer     : EJB
Presentation Layer :Struts

Spring -One stop shop application
        It takes care of all layers of enterprise application
         


Banking
=======

Develop a Banking application

Write a Java application to perform standard CRUD operations on Customer and Account Domain Objects using Map as DataSource.

    
     
Customer
        customerId
        name
        pan
        mobile         
        address
        dob
        

Account:
        accno
	name 
        balance
        String pan
        String adhar
        doc
        type

        
         
CustomerMainApp
              CustomerService
                           CustomerDao
                                        MapCustomerDaoImpl
                                                                CustomerMap
               


                                                    



Day1    22-Jun-2021
====================

Spring :  IOC ,DI via XML/Annotation


IOC -Inversion of Control -Don't call me I  will call you

DI  -It is a mechanism of initializing the dependencies 

      1.setter injection      :
      2.constructor injection :     
      
      
We have to explain Spring Container about the spring beans(Java Classes) via XML file or annotations


Step 1: create a Java Project and add spring jar files to class path


Step 2: create a spring container (controls life-cyles of bean)

                 1.Core Container -BeanFactory based

                 2.Advanced Container -ApplicationContext

                 3.Web Container -WebApplicationContext



                             BeanFactory (I)  -Core Container
                                 |
                                 |XMLBeanFactory (C) :Lazy Initialization
                                 |
                            ApplicationContext(I)    :Eager Initialization  -Advanced Container
                                 |
ClasspathXMLApplicationContext (C)|    AnnotationConfigApplicationContext (C)
                                 |
                                 |
                           ServletWebApplicationContext(I)           


//core container


Lazy Initiialization

XmlBeanFactory c=new XmlBeanFactory(new ClassPathResource("beans.xml"));
         
         
//advanced container
Eager Initialization 
    
ClassPathXmlApplicationContext c=new ClassPathXmlApplicationContext("beans.xml");
	    

<beans default-lazy-init=false|true/>
	    
<bean lazy-init=false|true/>


        
1.get bean by type if only one bean of specific type
  
  CustomerMainApp cma=c.getBean(CustomerMainApp.class);
         
2.get bean by id when multiple beans of same type

CustomerMainApp cma=(CustomerMainApp)c.getBean("customerMainApp");
        




DI :Mechamsim of initialzing the depencencies

  setter   ->    <property name="cs" ref="customerService">

  constructor -> <constructor-arg   name="cs" ref="customerService">
                          
                                                    
Spring Bean Life Cycle
==========================
1.Instantiation
2.Dependency Injection(setter/constructor)
3.Initialization   (init-method)
4.Service
5.Destruction      (destroy-method)


Spring Bean Scope : singleton|prototype|request|session



Spring Bean Scope
==================
<bean  scope="singleton"/>

singleton -Stateless Application
prototype -Stateful Application

request  -web
session  -web


Day3    23-Jun-2021
====================

Auto-wiring
============

Wiring - It's a mechanisam of associating the beans with each other (property or constructor-arg)

Auto-wiring -It's a mechanisam of delegating the responsisbilty of associating the beans with each other to the spring container

auto-wire="no|byType|byName|constructor"




Annotation Based configuration
===============================
                                           @Component
                                               |
                                               |

              @Controller                   @Service                   @Reposiotry



@Configuration   => <beans.xml>
@PostConstruct   => init-method
@PreDestroy      => destroy-method
@Autowire        =>autwire (byType)   can be applied to constructor/setter/interface
@Qualifier       => byName 
@ComponentScan   => <context:component-scan   package="com"/>



<bean> </bean>   :          @Component,@Controller,@Service,@Reposiotory

<bean    init-method=""   destroy-method=""/>    @PostConstruct    @PreDestroy

<bean    autowire=""/>     @Autowire  =>default byType


Note :To enable annotation based bean registration put below tag

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

<context:component-scan   package="com"/>

</beans>



Day4    23-Jun-2021
===================

CustomerMainApp
              CustomerService
                           CustomerDao
                                        MapCustomerDaoImpl
                                                                                    CustomerMap

                                        MySQLCustomerDaoImpl           
                                                   JdbcTemplate                
                                                         DataSource
                                                               driverClassName       MySQL
                                                               username
                                                               url
                                                               password




add mysqljar file in classpath

mysql-connector-java-8.0.25.jar file  


SQL Script to create database,table and insert the records
============================================================
drop database company;

create database company;

use company;

create table customers(
  customerId int primary key,
  name text,
  pan text,
  mobile text,
  address text,
  dob date
  );

insert into customers values(1111,'Sachin patil','skxnd9834f','8737726736','Pune','1982-01-01');
insert into customers values(2222,'Sumit patil','abcnd9834f','6637726736','Mumbai','1985-01-01');
insert into customers values(3333,'Sunil patil','abcnd9834f','7737726736','Bangalore','1989-01-01');


select * from customers;


JdbcTemplate
==============


GET the Data                   :  List query()
                                  Object  queryForObject()   


UPDATE,INSERT,DELETE           :  int update()

               

RowMapper
==========

public class CustomerRowMapper implements RowMapper<Customer> {

	@Override
	public Customer mapRow(ResultSet rs, int rownum) throws SQLException {

		System.out.println("============In mapRow==========");

		Customer c = new Customer();
		c.setCustomerId(rs.getInt(1));
		c.setName(rs.getNString(2));
		c.setPan(rs.getString(3));
		c.setMobile(rs.getString(4));
		c.setAddress(rs.getString(5));
		c.setDob(rs.getDate(6));

		return c;
	}

}


db.properties
===============
jdbc.driver=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/company
jdbc.username=root
jdbc.password=admin



<!-- Load these values before creating any beans -->

<bean   class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
<property name="location" value="db.properties"/>
</bean>



<!-- DriverManagerDataSource -->
<bean  class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
<property name="driverClassName"   value="${jdbc.driver}"/>
<property name="url"   value="${jdbc.url}"/>
<property name="username"   value="${jdbc.username}"/>
<property name="password"   value="${jdbc.password}"/>
</bean>





Day5    25-Jun-2021
====================

Spring AOP   :Jar file to be added in classpath : aspectjweaver-1.9.6.jar
==========
OOP - Object Oriented Programming

AOP  -Aspect Oriented Programming
=====





Concern :Piece Of Code

                           Functional          Nonfunctional

Business Logic  =          Core Concern    +   Cross Cutting Concern

                            withdraw                  security
                            deposit                   logging 
                            transfer                  scalabilty
                                                      tx mgmt




AOP is used to separate CCC from CC and attach CCC dynamically in a CC.

Can We Separate CCC from CC using OOP? Yes but it is a static approach.
 






//Core Concern
class Banking{


int  withdraw(int accno,double amount){
Logging l=new Logging();
l.print("perform withdrawl");

}


int  deposit(int accno,double amount){
Logging l=new Logging();
l.print("transfer");
}
int  fundTransfer(int source,int destination, double amount){
Logging l=new Logging();
l.print("perform transfer");
}



}


//Cross Cutting
class Logging{

//What to execute
void print(String message){
System.out.println(message)
}

}




Target  :It is a piece of code that implements Core Concern :Banking


Advice  :It is a piece of code that implements Cross Cutting  Concern
               
                 what + when

               before => execute before method
               after  => execute after method execution complete successfully/unsuccessfully
               after return =>execute only after method execution complete successfully
               after throwing=>execute after method throws some exception
               around =>It's a combination of before,after,after return and after throwing

JoinPoint  :
                 It is a well defined point in Core Concern where u want to execute CCC.
                 Spring supports only method call as a join point.

Point Cut  :
                 It is a set of one or more join points
                 

Aspect : advice +point cut  ->what +when+where


Weaving :Mechanism of attaching CCC to CC




What to execute
================

public class Logging {
	
		
	public Logging() {
	System.out.println("Logging Advice created.....");
	}
	
	
	/**
	 * * This is the method which I would like to execute * before a selected
	 * method execution.
	 */
	
	public void beforeAdvice() {
		System.err.println("Going to setup customer profile.");
	}

	/**
	 * * This is the method which I would like to execute * after a selected
	 * method execution.
	 */
	
	public void afterAdvice() {
		System.err.println("Customer profile has been setup.");
	}

	
	
	/**
	 * * This is the method which I would like to execute * when any method
	 * returns.
	 */
    
	public void afterReturningAdvice(Object retVal) {
		System.err.println("Customer afterReturning:" + retVal);
	}

    
	/**
	 * * This is the method which I would like to execute * if there is an
	 * exception raised by any method.
	 */
	
	public void AfterThrowingAdvice(Exception ex) {
		System.err.println("Customer There has been an exception: " + ex);
	}
	

	public Object aroundAdvice(ProceedingJoinPoint joinPoint)throws Throwable{
	
    	Object returnVal=null;
    	System.err.println("In around Advice .....");
    	
    	
    	try {
    		System.err.println("Before Proceed :");
        	returnVal=joinPoint.proceed();
        	System.err.println("After  Proceed :"+returnVal);
        	 Customer value=(Customer)returnVal;
        	
        	 value.setName(value.getName().toUpperCase());   
		    
    	
    	} catch (Throwable e) {
             e.printStackTrace();
         System.out.println("around Advice  exception wrapped.....");
             
    		}
    	System.out.println("around Advice  over.....");
          return returnVal;
    }
    }




When to execute
=================
@Before
@After
@AfterReturn
@AfterThrowing
@Around



Where to Execute
==================
@Pointcut("execution(* com.pradeep.bank.service.CustomerService.*(..))")
private void selectAll() {}

@Pointcut("execution(* com.pradeep.bank.service.CustomerService.findCustomer(..))")
private void select() {}






@Component
@Aspect
public class Logging {
	
	
	
	public Logging() {
	System.out.println("Logging Advice created.....");
	}
	
	/**
	 * Following is the definition for a pointcut to select * all the methods
	 * available. So advice will be called * for all the methods.
	 */
	@Pointcut("execution(* com.pradeep.bank.service.CustomerService.*(..))")
	private void selectAll() {
	}

	@Pointcut("execution(* com.pradeep.bank.service.CustomerService.findCustomer(..))")
	private void select() {
	}

	
	
	/**
	 * * This is the method which I would like to execute * before a selected
	 * method execution.
	 */
	@Before("selectAll()")
	public void beforeAdvice() {
		System.err.println("Going to setup customer profile.");
	}

	/**
	 * * This is the method which I would like to execute * after a selected
	 * method execution.
	 */
	@After("selectAll()")
	public void afterAdvice() {
		System.err.println("Customer profile has been setup.");
	}

	
	
	/**
	 * * This is the method which I would like to execute * when any method
	 * returns.
	 */
    @AfterReturning(pointcut = "selectAll()", returning = "retVal")
	public void afterReturningAdvice(Object retVal) {
		System.err.println("Customer afterReturning:" + retVal);
	}

    
	/**
	 * * This is the method which I would like to execute * if there is an
	 * exception raised by any method.
	 */
	@AfterThrowing(pointcut = "selectAll()", throwing = "ex")
	public void AfterThrowingAdvice(Exception ex) {
		System.err.println("Customer There has been an exception: " + ex);
	}
	

    @Around("select()")
	public Object aroundAdvice(ProceedingJoinPoint joinPoint)throws Throwable{
	
    	Object returnVal=null;
    	System.err.println("In around Advice .....");
    	
    	
    	try {
    		System.err.println("Before Proceed :");
        	returnVal=joinPoint.proceed();
        	System.err.println("After  Proceed :"+returnVal);
        	 Customer value=(Customer)returnVal;
        	
        	 value.setName(value.getName().toUpperCase());   
		    
    	
    	} catch (Throwable e) {
             e.printStackTrace();
         System.out.println("around Advice  exception wrapped.....");
             
    		}
    	System.out.println("around Advice  over.....");
          return returnVal;
    }
    }



To enable Annotation based AOP
==================================
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	default-lazy-init="true"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">


<aop:aspectj-autoproxy/>


</beans>




Day6  28-Jun-2021
=================
1.Transaction using Spring Annotation
2.Spring Web MVC

@Transactional

Transaction : It's a interaction with database (DML:INSERT,UPDATE,DELETE)
              It is a group of statements that should be excuteted as single unit successfuly/Unsuccessfully    

JDBC : Connection is by default in autocommit enabled mode.

                         withdraw(int source,double amount)  

   fundTransfer

                         deposit(int destination,double amount)




Spring Web MVC
=================


http://localhost:8080/spring-web-mvc-cms/spring/hello
http://localhost:8080/spring-web-mvc-cms/spring/welcome
http://localhost:8080/spring-web-mvc-cms/spring/greet
http://localhost:8080/spring-web-mvc-cms/spring/today



1.Tomcat Download :https://apachemirror.wuchna.com/tomcat/tomcat-9/v9.0.46/bin/apache-tomcat-9.0.46.zip

2.Add Spring jar file to Tomcat lib directory

3.Create a dynamic web project with web.xml

4.Register a DispatcherServlet in web.xml as below

<servlet>
<servlet-name>spring</servlet-name>
<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<load-on-startup>1</load-on-startup>
</servlet>

<servlet-mapping>
<servlet-name>spring</servlet-name>
<url-pattern>/spring/*</url-pattern>
</servlet-mapping>

5.By default DispatcherServlet will load the file with name (DispatcherServletName-serlvet.xml) 
  So create a file spring-servlet.xml

6.Create a Root Web application Context
   by default it will search applicationContext.xml
  

<listener>
<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>


<context-param>
<param-name>contextConfigLocation</param-name>
<param-value>/WEB-INF/applicationContext.xml</param-value>
</context-param>

1.RootWebApplication created first





Spring Web MVC
==============
Develop a Spring Web MVC application to build RESTful Web API to perform CRUD Operations


URI                      METHOD                           OPERATION
============================================================== 

/customers               GET                               GET ALL CUSTOMERS
/customers/1             GET                               GET CUSTOMER BY ID
/customers/1             PUT                               UPDATE CUSTOMER BY ID
/customers/1             DELETE                            DELETE CUSTOMER BY ID
/customers               POST                              ADD CUSTOMER 


HTTP status codes
======================
200    :   OK
201    :   Created
500    :   INTERNAL SERVER ERROR
404    :   NOT FOUND
204    :   NO CONTENT
401    :   INVALID CREDENTAILS
403    :   FORBIDDEN
405    :   METHOD NOT ALLOWED


MVC (                 Model                   View                   Controller)
================================================================================
JSP Model-1          Java Bean                JSP                     JSP
JSP Model-2          Java Bean                JSP                     Servlet    (Struts1.x,JSF 1.x,2.x ,Spring Web MVC)
JSP Model-3          Java Bean                JSP                     Filter     (Struts2.x)
JSP Model-4          Java Bean                JSP                     Tag Handler


Spring Web MVC follows MVC2 /JSP Model2
==============================================   

 url      method      mapping                                                         new style                                         =========================================================================================================



/hello   GET         @RequestMapping(value="/hello",method=RequestMethod.GET)        @GetMapping("/hello")
/hello   POST        @RequestMapping(value="/hello",method=RequestMethod.POST)       @PostMapping("/hello")
/hello   DELETE      @RequestMapping(value="/hello",method=RequestMethod.DELETE)     @DeleteMapping("/hello")
/hello   PUT         @RequestMapping(value="/hello",method=RequestMethod.PUT)        @PutMapping("/hello")
/hello   PATCH       @RequestMapping(value="/hello",method=RequestMethod.PATCH)      @PatchMapping("/hello")




@RestController   =>  @Controller +  @ResponseBody 



<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <mvc:annotation-driven/>
</beans>
 


Java To JSON    : @ResponseBody

JSON to Java    : @RequestBody
================================


@ResponseBody  => Server to Client => Java Object to JSON or XML  => Accept       = application/json 

@RequestBody  => Client to Server =>  JSON or XML to Java Object   => Content-Type = application/json


@ResponseBody  => Server to Client => Java Object to JSON or XML  => Accept       = application/json 

@RequestBody  => Client to Server =>  JSON or XML Java Object to  => Content-Type = application/json


For Message Conversion :

Step 1:  add below tag in spring-config file
=======
<mvc:annotation-driven/>

Step 2:  Add below jars in class path
=======
jackson-core-2.9.8
jackson-annotations-2.9.8.jar
jackson-databind-2.9.8.jar



https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core/2.9.8
https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations/2.9.8
https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind/2.9.8




http://localhost:8080/spring-web-mvc-cms/spring/*
http://localhost:8080/spring-web-mvc-cms/rest/*




/spring/*   spring-ds    Controller        Service              Dao/Repository (mySQL)

/rest/*     rest-ds      Controller        Service              Dao/Repository (map)

      



http://localhost:8080/spring-web-mvc-cms/spring/getallcustomers
http://localhost:8080/spring-web-mvc-cms/rest/customers
http://localhost:8080/spring-web-mvc-cms/rest/customers/101


day 10  5-July-2021
======================

What is Spring Boot?
=====================
1.Spring Boot provides a good platform for Java developers to develop a stand-alone and 
production-grade spring application that you can just run.
2.You can get started with minimum configurations without the need for an entire Spring configuration setup.

Spring Boot offers the following advantages to its developers -
=================================================================
1.Easy to understand and develop spring applications
2.Increases productivity
3.Reduces the development time

Goals
======
1.To avoid complex XML configuration in Spring
2.To develop a production ready Spring applications in an easier way
3.To reduce the development time and run the application independently
4.Offer an easier way of getting started with the application

Why Spring Boot?
================

You can choose Spring Boot because of the features and benefits it offers as given here -

1.It provides a flexible way to configure Java Beans, XML configurations, and Database Transactions.

2.It provides a powerful batch processing and manages REST endpoints.

3.In Spring Boot, everything is auto configured; no manual configurations are needed.

4.It offers annotation-based spring application

5.Eases dependency management (POM)

6.It includes Embedded Servlet Container


How does it work?
=>Spring Boot automatically configures your application based on the dependencies you have added to the project by using
 @EnableAutoConfiguration annotation. 
 
 For example, if MySQL database is on your classpath, but you have not configured any database connection, 
 then Spring Boot auto-configures an in-memory database.

=>The entry point of the spring boot application is the class contains @SpringBootApplication annotation 
   and the main method.

Spring Boot automatically scans all the components included in the project by using @ComponentScan annotation.



Spring Boot Starters   (https://start.spring.io/)
=====================
=>Handling dependency management is a difficult task for big projects. 
=>Spring Boot resolves this problem by providing a set of dependencies for developers convenience.
=>For example, if you want to use Spring and JPA for database access, 
    it is sufficient if you include spring-boot-starter-data-jpa dependency in your project.

Note that all Spring Boot starters follow the same naming pattern spring-boot-starter- *, 
  where * indicates that it is a type of the application.

Examples
Look at the following Spring Boot starters explained below for a better understanding -

1.Spring Boot Starter Actuator dependency is used to monitor and manage your application. Its code is shown below -

<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>


2.Spring Boot Starter Security dependency is used for Spring Security. Its code is shown below -

<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-security</artifactId>
</dependency>


3.Spring Boot Starter web dependency is used to write a Rest Endpoints. Its code is shown below -

<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-web</artifactId>
</dependency>
      
4.Spring Boot Starter Test dependency is used for writing Test cases. Its code is shown below -

<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-test</artifactId>
</dependency>      
      
      
Auto Configuration
====================


https://start.spring.io/




Spring Web WEB
==================
Build web, including RESTful, applications using Spring MVC. Uses Apache Tomcat as the default embedded container.

Spring Boot DevTools DEVELOPER TOOLS
=====================================
Provides fast application restarts, LiveReload, and configurations for enhanced development experience.

Spring Boot Actuator OPS
========================
Supports built in (or custom) endpoints that let you monitor and manage your application - 
such as application health, metrics, sessions, etc.

Spring Security SECURITY
=========================
Highly customizable authentication and access-control framework for Spring applications.

Spring Data JPA SQL
===================
Persist data in SQL stores with Java Persistence API using Spring Data and Hibernate.

CRUDRepository                CRUDRepository
     |                              |
PagingAndSortingRespistory    MongoRepository
     |
JPAReposiotry




Spring Data MongoDB NOSQL
=========================
Store data in flexible, JSON-like documents, meaning fields can vary from document to document and data structure can be changed over time.


Spring Security
================
Default username :user
Password         :generated on console


To customize it
================

add below properties in application.properties
==============================================

spring.security.user.name=pradeep
spring.security.user.password==pradeep


https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html




day 11  6-july-2021
=======



spring.datasource.url=jdbc:mysql://localhost:3306/company
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=admin
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect


#InternalResourceViewResolver 
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp



<!--   To generate JSP output -->
		

                <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		

Hibernate ORM Tool
=====================
           Employee
===========================
Id       Name        Salary
============================
101     PRadeep      120000                     Employee e=new Employee(101,"Pradeep",120000);
==============================


class Employee{
private int id;
private String name;
private double salary
}



JPA Java Persistance API  (ORM Specification)

Hibernate
Ibatis
toplink



CRUDRepository
       |
PagingAndSortingRepository
       |
JPARepository
 



day 12  7-july-2021
===================

Spring Security
================
Default username :user
Password         :generated on console


To customize it
================

add below properties in application.properties
==============================================
spring.security.user.name=pradeep
spring.security.user.password=pradeep



https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html




JAAS
====
Java Authentication and Authorization Service

Authentication
================
1.BASIC  (Before Spring Boot 2.x)
2.DIGEST
3.FORM BASED (From Spring Boot 2.x)  : Endpoints login,logout


Authorization (role)
====================

To Customize default JAAS


We should write a configuration class by extending WebSecurityConfigureerAdapter and override configure methods.




@Configuration
public class BankConfig  extends WebSecurityConfigurerAdapter{

	@Autowired
	private DataSource dataSource;
	
	
	public BankConfig() {
	System.out.println("==========BankConfig created=================");
	}
	
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		System.out.println("==========BankConfig created  AuthManagerBuilder=================");
		//super.configure(auth);
	
		
		/*
		 * auth.inMemoryAuthentication()
		 * .withUser("RAM").password("{noop}RAM").roles("ADMIN").and()
		 * .withUser("RAHIM").password("{noop}RAHIM").roles("STUDENT").and()
		 * .withUser("DAVID").password("{noop}DAVID").roles("TEACHER");
		 * 
		 * 
		 */
		
		auth.jdbcAuthentication()
		    .passwordEncoder(new BCryptPasswordEncoder())
		    .dataSource(dataSource);
		
	}
	
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		System.out.println("==========BankConfig created  HttpSecurity=================");
		//super.configure(http);  Default is Form Based
		
		
		http.authorizeRequests()
		.antMatchers("/rest/*").permitAll()
		.antMatchers("/rest/*").denyAll()
		.antMatchers("/spring/*").hasRole("ADMIN")
		.antMatchers("/spring/welcome","/spring/today").hasRole("STUDENT")
		.antMatchers("/spring/hello","/spring/greet").hasAnyRole("ADMIN","TEACHER")
	
		
		    .anyRequest()
		    .authenticated()
		    .and()
		    .formLogin();//  Form Based
		    //.httpBasic();// Basic Auth
		
		
		
	}
	
	
	
}


data.sql
=========
insert into users(username, password, enabled)values('RAM','$2a$10$ge2ybXdrHWmY6qNWOkCaze2jAgTfeTovMsbUciUJCzIcfG/x.YGZi',true);
insert into authorities(username,authority)values('RAM','ROLE_ADMIN');
 
insert into users(username, password, enabled)values('RAHIM','$2a$10$ZuVLPUbpOc7Bxeu5GRdD4.XH0XWl4H6103a9OqNP58PTX/zqeGe1W',true);
insert into authorities(username,authority)values('RAHIM','ROLE_STUDENT');

insert into users(username, password, enabled)values('DAVID','$2a$10$9T6gPdQEug.dtrOorCwlVeQLd14OzZv649bGnl2fv3/jl4NZVc22u',true);
insert into authorities(username,authority)values('DAVID','ROLE_TEACHER');

schema.sql
============
drop table authorities;
drop table users;

create table users (
    username varchar(50) not null primary key,
    password varchar(120) not null,
    enabled boolean not null
);

create table authorities (
    username varchar(50) not null,
    authority varchar(50) not null,
    foreign key (username) references users (username)
);



application.properties
=========================
spring.datasource.initialization-mode=ALWAYS










day 13 :8-July-2021


MongoDB details
=================

https://www.tutorialspoint.com/mongodb/mongodb_overview.htm



https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-4.4.6-signed.msi



Mongo DB                   RDBMS
==================================          
Database                  Database

Collection                Table        Class                    

Document                  Row          Object

Id                        Primary Key

Embeded documents         Joins



To start Mongo DB Server
========================

Create a folder in c drive :  c:\data\db

C:\Program Files\MongoDB\Server\3.4\bin>mongod   <enter>


To start Mongo DB Client
========================

C:\Program Files\MongoDB\Server\3.4\bin>mongo <enter>



day 14    :9-July-2021   
========================
Hibernate Relations

1.One To One             Employee  => EmployeeAddress
2.One To Many            Group     => Story    
3.Many To One            Group     => Story   
4.Many To Many           Book      => Author  



JPA  ->ORM Specifiaction
   Hibenrate -> ORM Implementation



Online Shopping CaseStudy
=============================
https://o7planning.org/10683/create-a-shopping-cart-web-application-with-spring-boot-hibernate



What is Angular  ?
=================
Angular is a platform for building mobile and desktop web applications.

Single Page Applications

Features of Angular
====================
1.Dependency Injection
2.One way/Two way data binding
    
3.MVC :
           With angular we can develop application in clean MVC way

4.Testing : Testing is the area where Angular shines really

5.Modules,Directives,Filters/Pipes,Services, Controllers (Components and Templates) etc....

Module
=============
Module is a container for services,directives,pipes,components and some other modules also.


AngularJS (1.6) :Dec 2010                                   Angular (12.0)    :Nov :2016

1. Not developed by keeping                                 1.Developed specially for
    mobile devlopment in mind.                                Mobile development

2. Basic building block is                                 2.Basic building block is
    Java Script Function                                        a TypeScript class

3.Controllers                                             3.Components and templates

4.filters   (sort,format,search)                          4.pipes (11 biilt in pipes)

5.services                                                5.providers

6.directives                                              6.directive   
        ng-if                                                        *ngIf
        ng-repeat                                                    *ngFor ,ngModel
      

7.routing   (function based)                              7.routing   (JSON based) 

8.development is easy                                      8.complicated/difficult


1.JS is browser understandable code so need of conversion
2.TypeScript is Object Oriented Version of JS and  is not understanable by browser so we need to covert it into JS.


To make angular development easy Angular team has provided one tool (@angular/cli) 


@angular/cli tool internally depends on Node JS


1. Install Node JS               :  https://nodejs.org/en/download/
   Install Visual Studion Code  :  https://code.visualstudio.com/


2. To see the version of node 

node -v


3. To see the version Node Package Manager

npm -v


4.Install angular cli (One time activity)
============================================
     npm i -g @angular/cli   <enter>


 To see the version of angular-cli tool
=======================================
  ng version


Create A New Angular Project
===========================
ng new <<project-name>>

Ex.
D:\angular-12>ng new pvc-angular-app
? Would you like to add Angular routing? Yes
? Which stylesheet format would you like to use? (Use arrow keys)  :CSS
> CSS
  SCSS   [ https://sass-lang.com/documentation/syntax#scss                ]
  Sass   [ https://sass-lang.com/documentation/syntax#the-indented-syntax ]
  Less   [ http://lesscss.org                                             ]




To Open the Current folder in Visual Studio
===========================================

E:\java-fsd-onsite-june-2021-main\my-angular-app>code .


To strat the application
=========================
Go inside the project on command prompt


D:\angular-12\pvc-angular-app>npm start


npm start => ng serve (from package.json)

or 

D:\angular-12\pvc-angular-app>ng serve


or 

D:\angular-12\pvc-angular-app>ng serve -o


npm start => 
        ng serve  =>
                    main.ts =>AppModule
                                =>AppComponent=>
                                           app.component.html=>
                                                        <app-root><app-root>=>index.html



- Generating browser application bundles (phase: setup)...Compiling @angular/core : es2015 as esm2015
Compiling @angular/common : es2015 as esm2015
Compiling @angular/platform-browser : es2015 as esm2015
Compiling @angular/router : es2015 as esm2015
Compiling @angular/platform-browser-dynamic : es2015 as esm2015
v Browser application bundle generation complete.

Initial Chunk Files   | Names         |      Size
vendor.js             | vendor        |   2.38 MB
polyfills.js          | polyfills     | 508.83 kB
styles.css, styles.js | styles        | 381.01 kB
main.js               | main          |  57.39 kB
runtime.js            | runtime       |   6.58 kB

                      | Initial Total |   3.32 MB

Build at: 2021-07-03T05:28:05.207Z - Hash: 1014fc027562cbfbd9c0 - Time: 53930ms

** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ **


v Compiled successfully.
v Browser application bundle generation complete.

5 unchanged chunks

Build at: 2021-07-03T05:28:08.147Z - Hash: 4cac0456c5a66e4beb22 - Time: 2175ms

v Compiled successfully.


angular cli commands
=========================

ng generate c <<componenet_name>>



To create a component  => ng g c  <Angular4Basics>
To create a service    => ng g s  <AngularService>
To create a directive  => ng g d  <AngularDirective>
To create a pipe       => ng g p  <AngularPipe>
To create a module     => ng g m  <AngularModule>
To create a class      => ng g class <AngularClass>


Routing
===========

=> [routerLink]  is a attribute directive to implement the routing



<li class="active"><a [routerLink]="['/home']">Home</a></li>
<li class="active"><a [routerLink]="['/basics']">Basics</a></li>
<li class="active"><a [routerLink]="['/pipes']">Pipes</a></li>
<li class="active"><a [routerLink]="['/technologies']">Technologies</a></li>
                            
 



app.routing.module.ts
======================
const routes: Routes = [
  {path:'home',component:HomeComponent},
  {path:'basics',component:AngularBasicsComponent},
  {path:'pipes',component:AngularPipesComponent},
  {path:'technologies',component:TechnologiesComponent},
  {path:'**',redirectTo:'home'}
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }










/basics        => AngularBasics              <a [routerLink]="['/basics']"  > Basics </a>
/pipes         => AngularPipes               <a [routerLink]="['/pipes']"  > Angular Pipes </a>
/technologies  => Technologies               <a [routerLink]="['/technologies']"  > Technologies </a> 
/home          => Home                       <a [routerLink]="['/home']"  > Home </a>  


templateUrl: './app.component.html',//Where to display if code is greater than 3 lines

template: '<h2>{{title}}</h2>',//Where to display if code is leass than 4 lines


Component is responsible for 4 things

 1.What to display?
 2.How to display?
 3.Where to display?
 4.Where to inject?


Angular Binding types
======================

1. Interpolation   

       Interpolation use the {{ expression }} to render the bound value to the component?s template.

         min="{{min}}"


2.Property Binding

       Property binding user [] to send values from the component  to the template.

           [max]="max"   

3.Event Binding

         (click)="showHide()"

4.One way data binding
         
           [ngModel]="name"

4.Two way data binding
         
           [(ngModel)]="name"
     


 

Note :TypeScript class members are public by default.

comopnent  ->@Component
module     ->@NgModule
pipe       ->@Pipe
directive  ->@Directive
service    ->@Injectable


Angular Directives  :add functionalities to HTML elements
==========================================================

Attribute Directve    :Won't change the HTML DOM structure
====================== 
 [ngStyle]
 [ngClass]
 [ngModel] =>It is applicable for only input elements > FormsModule should be imported in AppModule
 [ngSwitch]
 [routerLink]

Structural Directive :Will change the HTML DOM structure
====================
   *ngFor
   *ngIf
   *ngSwitchCase   => It is applicable for only container tags
   *ngSwitchDefault=> It is applicable for only container tags

Component Directive
==================
<app-root>  </app-root>
<ng-template></ng-template>






Angular Buitlin Pipes  (Format,Sort,Search)   :11 builtin pipes
================================================================

Dummy Data
============
employees=[
    {id:12,name:'Ram chinchole',salary:2345500,variable:0.15,
    city:'Pune',mobile:'8149976894',pan:'cmxac9845d',
    doj:new Date("February 01,2011"),isMarried:true,gender:1,age:33
   },
   {id:23,name:'Sachin chinchole',salary:324242.456784343,variable:0.10,
   city:'Mumbai',mobile:'7123456732',pan:'abxac9845a',
   doj:new Date("April 01,2013"),isMarried:true,gender:1,age:23
  },
  
  {id:11,name:'Ameya Joshi',salary:34343.456784343,variable:0.11,
  city:'Mumbai',mobile:'7788554433',pan:'abcac9845c',
  doj:new Date("June 01,2018"),isMarried:true,gender:1,age:34
 },
 
 {id:14,name:'Prachitee chinchole',salary:45345.456784343,variable:0.20,
 city:'Pune',mobile:'9158652627',pan:'xyzac9845d',age:45,
 doj:new Date("June 01,2010"),isMarried:false,gender:2
},

{id:21,name:'Prachi chinchole',salary:4345345.456784343,variable:0.15,
city:'Solapur',mobile:'9890732222',pan:'pvcac9845d',age:56,
doj:new Date("February 01,2017"),isMarried:true,gender:2
},

{id:17,name:'Mahesh chinchole',salary:345345.34324,variable:0.12,
city:'Solapur',mobile:'7158652622',pan:'amxac9845d',
doj:new Date("May 01,2013"),isMarried:false,gender:3,age:25
},
];








String
========
uppercase
lowercase
titlecase (angular4)
slice  

array
=====
slice

array|slice:startIndex:lastIndex


number
======
number     salary|number:'9.3-4'   
currency   salary|currency:'Rs'
percent    salary|percent

date
=====
date      

dob|date:'shortDate'
dob|date:'mediumDate'
dob|date:'longDate'
dob|date:'fullDate'
dob|date:'dd-MM-yyyy'

Object
======
object|json
object|keyvalue

Observable
===========
async


day 17:   16-July-2021
===========================



Angular Services  (Reusbale business logic)
===============================================

Angular provides builtin HttpClient service available in  HttpClientModule 
(@angular/common/http) to invoke remote service.



Fake Rest fual Web API
========================

https://jsonplaceholder.typicode.com


https://jsonplaceholder.typicode.com/users            GET
https://jsonplaceholder.typicode.com/users/1          GET

https://jsonplaceholder.typicode.com/posts
https://jsonplaceholder.typicode.com/posts/1
https://jsonplaceholder.typicode.com/posts?userId=1


https://jsonplaceholder.typicode.com/comments
https://jsonplaceholder.typicode.com/comments/1
https://jsonplaceholder.typicode.com/comments?postId=1


https://jsonplaceholder.typicode.com/todos
https://jsonplaceholder.typicode.com/todos/1
https://jsonplaceholder.typicode.com/todos?userId=1


https://jsonplaceholder.typicode.com/albums
https://jsonplaceholder.typicode.com/albums/1
https://jsonplaceholder.typicode.com/albums?userId=1


https://jsonplaceholder.typicode.com/photos
https://jsonplaceholder.typicode.com/photos/1
https://jsonplaceholder.typicode.com/photos?albumId=1





5.RouteParams and QueryParams
=============================

Use ActivatedRoute class to retrieve route params and query params


constructor(private us:UsersService,private route:ActivatedRoute) { 
    console.log("#######  UsersComponent created  ########");
  }


Route Param
===========

https://jsonplaceholder.typicode.com/users/1
https://jsonplaceholder.typicode.com/posts/1
https://jsonplaceholder.typicode.com/todos/1
https://jsonplaceholder.typicode.com/albums/1
https://jsonplaceholder.typicode.com/photos/1



       {path:'users/:userId',component:UsersComponent},


        syntax:    this.userId=this.route.snapshot.params.userId;

QueryParams
============

https://jsonplaceholder.typicode.com/posts?userId=1
https://jsonplaceholder.typicode.com/albums?userId=1
https://jsonplaceholder.typicode.com/todos?userId=1
https://jsonplaceholder.typicode.com/comments?postId=1


 syntax  :  this.userId=this.route.snapshot.queryParams.userId;

day 18:   19-July-2021
===========================

Angular Custom Pipes
=====================


To create a Custom Pipe we have to write a class decorated by @Pipe and implmeneting
PipeTransform i/f and overriding transofrom() method in it.


Custom Pipe Gender
=====================

ng g p pipes/Gender

gender|gender     1 :Male   ,2 :Female 3:Not disclosed


@Pipe({
  name: 'gender'
})
export class GenderPipe implements PipeTransform {

  transform(value: number): string {
    switch(value){
      case 1: return "Male";
      case 2: return "Female";
      case 3: return "Not disclosed";
    }
     return "";
  
  }
}


Custom Pipe :gender1
======================

gender|gender1    =>1 =Mr.  2=>Ms.  3.    


Custom Pipe orderBy
======================

employees|orderBy   =>sort employees on id basis in ascending order

employees|orderBy:'id'   =>sort employees on id basis in ascending order

employees|orderBy:'name'   =>sort employees on name basis in ascending order

employees|orderBy:'name':true   =>sort employees on name basis in descending order





Custom Pipe filter :  https://www.npmjs.com/package/ng2-search-filter
=======================================================================

npm i ng2-search-filter

import {Ng2SearchPipeModule} from 'ng2-search-filter';

employees|filter:'searchText'


day 19: 20-July-2021
====================

Angular Integration with Backend Spring Boot Application

Angular provides builtin HttpClient service available in  HttpClientModule 
(@angular/common/http) to invoke remote service.

http://localhost:1212/spring-boot-cms-v2/rest/customers/



ng g s services/CustomersService


import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';



@Injectable({
  providedIn: 'root'
})
export class CustomersService {

private baseURL="http://localhost:1212/spring-boot-cms-v2/rest/customers";

  constructor(private http:HttpClient) {
    console.log("========CustomersService created===============");
   
  }

  getAllCustomers():Observable<any>{
    return this.http.get(this.baseURL);
  }

  getCustomerById(customerId:number):Observable<any>{
    return this.http.get(this.baseURL+"/"+customerId);
  }

  deleteCustomerById(customerId:number):Observable<any>{
    return this.http.delete(this.baseURL+"/"+customerId);
  }

  updateCustomerById(customerId:number,customer:any):Observable<any>{
    return this.http.put(this.baseURL+"/"+customerId,customer);
  }
  
  addCustomer(customer:any):Observable<any>{
    return this.http.post(this.baseURL,customer);
  }
  
}


ng g c Customers


customers:1 Access to XMLHttpRequest at 'http://localhost:1212/spring-boot-cms-v2/rest/customers' from origin 'http://localhost:4200' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.


Cross Origin Resource Sharing

To allow CORS put below annotation 

@CrossOrigin(origins = {"http://localhost:4200","http://localhost:3333"})
@RestController
@RequestMapping("/rest/customers")
public class CustomerRestController { }



Front end  :4200
Back end   :1212

ng serve --port 3333     //will start the live server on 3333

ng serve --port 3333 -o  //will start the live server on 3333 and open the browser automatically


day 20: 21-July-2021
====================

1.Component To Component communication
========================================

   Nested   => Parent   =>Child


		Parent -> Child   =>   @Input() parentMessage; 

                Child ->   Parent  =>  @Output()childChanged=new EventEmitter<string>(); (custom events)
     

  <app-child   (childChanged)="childMessage=$event"      [parentMessage]="message"></app-child>

2.Custom Directives
====================

Attribute Directive   :  ElementRef and Renderer2
====================

<h1  [bgColor]="'red'"  [fgColor]="'red'" >Hello World</h1>


Structural Directive    :TemplateRef  and ViewContainerRef
=======================

<h1  *show="true">Hello World</h1>

<h1  *hide="true">Hello World</h1>


3.Injection using @ViewChild decorator
=======================================

1.To Inject The Component

  @ViewChild(NumberComponent,{static:false}) 
  private n:NumberComponent; 


2.To Inject The Directive

  @ViewChild(FgColorDirective,{static:false}) 
  private f:FgColorDirective;
  

3.To Inject The ElementRef

  @ViewChild("name",{static:false}) 
  private name:ElementRef;
  
  @ViewChild("city",{static:false}) 
  private city:ElementRef;
  






1.Pagination
2.Form Validation
3.Angular Guards


1.Component LifeCycle
2.Angular Testring
3.Angular readymade case study

